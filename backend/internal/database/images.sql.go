// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: images.sql

package database

import (
	"context"
)

const getImage = `-- name: GetImage :one
SELECT id, name, image_path, created_at, updated_at FROM images
where id = ?
LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id interface{}) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImagePath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getImages = `-- name: GetImages :many
SELECT id, name, image_path, created_at, updated_at FROM images
`

func (q *Queries) GetImages(ctx context.Context) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImagePath,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
