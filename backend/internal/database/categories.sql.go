// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: categories.sql

package database

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (id, name, user_id, image_id, created_at, updated_at)
VALUES (lower(hex(randomblob(16))), ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, name, user_id, image_id, created_at, updated_at
`

type CreateCategoryParams struct {
	Name    string
	UserID  interface{}
	ImageID interface{}
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.Name, arg.UserID, arg.ImageID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.ImageID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT id, name, user_id, image_id, created_at, updated_at FROM categories
`

func (q *Queries) GetCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.ImageID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE accounts
SET name = COALESCE(?, name), image_id = COALESCE(?, image_id), updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateCategoryParams struct {
	Name    string
	ImageID interface{}
	ID      interface{}
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory, arg.Name, arg.ImageID, arg.ID)
	return err
}
