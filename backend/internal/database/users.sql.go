// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, password, salt, created_at, updated_at)
VALUES (lower(hex(randomblob(16))), ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, name, password, salt, created_at, updated_at
`

type CreateUserParams struct {
	Name     string
	Password string
	Salt     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Password, arg.Salt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, password, salt, created_at, updated_at FROM users
WHERE id = ? 
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id interface{}) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSalt = `-- name: GetUserSalt :one
SELECT salt FROM users
where name = ?
LIMIT 1
`

func (q *Queries) GetUserSalt(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserSalt, name)
	var salt string
	err := row.Scan(&salt)
	return salt, err
}

const verifyUser = `-- name: VerifyUser :one
SELECT id, name, password, salt, created_at, updated_at FROM users
WHERE name = ? AND password = ? 
LIMIT 1
`

type VerifyUserParams struct {
	Name     string
	Password string
}

func (q *Queries) VerifyUser(ctx context.Context, arg VerifyUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, verifyUser, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
