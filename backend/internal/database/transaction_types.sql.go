// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: transaction_types.sql

package database

import (
	"context"
)

const getTransactionType = `-- name: GetTransactionType :one
SELECT id, name, description, created_at, updated_at FROM transaction_types
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTransactionType(ctx context.Context, id interface{}) (TransactionType, error) {
	row := q.db.QueryRowContext(ctx, getTransactionType, id)
	var i TransactionType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionTypes = `-- name: GetTransactionTypes :many
SELECT id, name, description, created_at, updated_at FROM transaction_types
`

func (q *Queries) GetTransactionTypes(ctx context.Context) ([]TransactionType, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionType
	for rows.Next() {
		var i TransactionType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
